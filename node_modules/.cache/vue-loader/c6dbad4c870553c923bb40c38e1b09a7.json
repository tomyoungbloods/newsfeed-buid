{"remainingRequest":"/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tomjongbloets/newsapp/node_modules/vuetify-loader/lib/loader.js??ref--18-0!/Users/tomjongbloets/newsapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tomjongbloets/newsapp/src/components/news/EditNews.vue?vue&type=template&id=57153f79&","dependencies":[{"path":"/Users/tomjongbloets/newsapp/src/components/news/EditNews.vue","mtime":1587209070429},{"path":"/Users/tomjongbloets/newsapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsapp/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/tomjongbloets/newsapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}