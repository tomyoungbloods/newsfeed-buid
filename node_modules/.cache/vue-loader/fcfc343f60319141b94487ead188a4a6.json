{"remainingRequest":"/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tomjongbloets/newsapp/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/tomjongbloets/newsapp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tomjongbloets/newsapp/src/components/NewsFeed.vue?vue&type=template&id=55ab72c1&","dependencies":[{"path":"/Users/tomjongbloets/newsapp/src/components/NewsFeed.vue","mtime":1587310941528},{"path":"/Users/tomjongbloets/newsapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsapp/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/tomjongbloets/newsapp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsapp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGF0dHJzOiB7IG5ld3NfaWQ6ICJuZXctZmVlZCIgfSB9LAogICAgWwogICAgICBfYygKICAgICAgICAidi1yb3ciLAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAidi1jb2wiLAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAidmlldy1uZXdzIiwKICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBuZXdzX2lkOiBfdm0ubmV3c1swXS5uZXdzX2lkIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJ2LWltZyIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3aGl0ZS0tdGV4dCBhbGlnbi1lbmQgYm9yZGVyLXJhZGl1cyIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICBzcmM6IF92bS5uZXdzWzBdLmltYWdlLAogICAgICAgICAgICAgICAgICAgICAgICBncmFkaWVudDogInRvIGJvdHRvbSwgcmdiYSgwLDAsMCwuMSksIHJnYmEoMCwwLDAsLjUpIiwKICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjAwcHgiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRpdGxlIiwgewogICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKF92bS5uZXdzWzBdLnRpdGxlKSB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX2woX3ZtLm5ld3MsIGZ1bmN0aW9uKG5ld3NpdGVtcykgewogICAgICAgIHJldHVybiBfYygKICAgICAgICAgICJ2LXJvdyIsCiAgICAgICAgICB7IGtleTogbmV3c2l0ZW1zLm5ld3NfaWQgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbHM6ICI1IiwgbWQ6ICI0IiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdG86IHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogInZpZXctbmV3cyIsCiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBuZXdzX2lkOiBuZXdzaXRlbXMubmV3c19pZCB9CiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgX2MoInYtaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ3aGl0ZS0tdGV4dCBhbGlnbi1lbmQgYm9yZGVyLXJhZGl1cyIsCiAgICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IG5ld3NpdGVtcy5pbWFnZSwgaGVpZ2h0OiAiMTUwcHgiIH0KICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgICAgeyBhdHRyczogeyBjb2xzOiAiNyIsIG1kOiAiNiIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ2aWV3LW5ld3MiLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgbmV3c19pZDogbmV3c2l0ZW1zLm5ld3NfaWQgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ2LWNhcmQtdGl0bGUiLCB7CiAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKG5ld3NpdGVtcy50aXRsZSkgfQogICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIH0pCiAgICBdLAogICAgMgogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}