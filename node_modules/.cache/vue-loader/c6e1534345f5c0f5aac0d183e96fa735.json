{"remainingRequest":"/Users/tomjongbloets/newsfeed-buid/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/tomjongbloets/newsfeed-buid/node_modules/vuetify-loader/lib/loader.js??ref--17-0!/Users/tomjongbloets/newsfeed-buid/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tomjongbloets/newsfeed-buid/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tomjongbloets/newsfeed-buid/src/components/NewsFeed.vue?vue&type=template&id=55ab72c1&","dependencies":[{"path":"/Users/tomjongbloets/newsfeed-buid/src/components/NewsFeed.vue","mtime":1587488903634},{"path":"/Users/tomjongbloets/newsfeed-buid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsfeed-buid/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsfeed-buid/node_modules/vuetify-loader/lib/loader.js","mtime":1574476662000},{"path":"/Users/tomjongbloets/newsfeed-buid/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tomjongbloets/newsfeed-buid/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IGF0dHJzOiB7IGlkOiAibmV3LWZlZWQiIH0gfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgInYtcm93IiwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgInYtY29sIiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBhLTAiIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJyb3V0ZXItbGluayIsCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgdG86IHsKICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ2aWV3LW5ld3MiLAogICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IG5ld3NfaWQ6IF92bS5uZXdzWzBdLm5ld3NfaWQgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgInYtaW1nIiwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIndoaXRlLS10ZXh0IGFsaWduLWVuZCBib3JkZXItcmFkaXVzLWZ1bGwiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBfdm0ubmV3c1swXS5pbWFnZSwKICAgICAgICAgICAgICAgICAgICAgICAgZ3JhZGllbnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgInRvIGJvdHRvbSwgcmdiYSgyNTUsMjU1LDI1NSwwKSA0MCUsIHJnYmEoODAsMTgxLDI0MiwxKSIsCiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodDogIjUwdmgiCiAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRpdGxlIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRsaW5lIGZvbnQtd2VpZ2h0LWJvbGQiLAogICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKF92bS5uZXdzWzBdLnRpdGxlKSB9CiAgICAgICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX2woX3ZtLm5ld3MsIGZ1bmN0aW9uKG5ld3NpdGVtcykgewogICAgICAgIHJldHVybiBfYygKICAgICAgICAgICJ2LXJvdyIsCiAgICAgICAgICB7IGtleTogbmV3c2l0ZW1zLm5ld3NfaWQsIHN0YXRpY0NsYXNzOiAibmV3cy1mZWVkLWxpc3QiIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogInBhLTAiLCBhdHRyczogeyBjb2xzOiAiNCIsIG1kOiAiNCIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAicm91dGVyLWxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHRvOiB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ2aWV3LW5ld3MiLAogICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHsgbmV3c19pZDogbmV3c2l0ZW1zLm5ld3NfaWQgfQogICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgIF9jKCJ2LWltZyIsIHsKICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAid2hpdGUtLXRleHQgYWxpZ24tZW5kIGJvcmRlci1yYWRpdXMiLAogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBuZXdzaXRlbXMuaW1hZ2UsIGhlaWdodDogIjE0MHB4IiB9CiAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidi1jb2wiLAogICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJwYS0wIiwgYXR0cnM6IHsgY29sczogIjgiLCBtZDogIjYiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgInJvdXRlci1saW5rIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0bzogewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAidmlldy1uZXdzIiwKICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IG5ld3NfaWQ6IG5ld3NpdGVtcy5uZXdzX2lkIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRpdGxlIiwgewogICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJzdWJ0aXRsZS0xIGZvbnQtd2VpZ2h0LWJvbGQiLAogICAgICAgICAgICAgICAgICAgICAgZG9tUHJvcHM6IHsgdGV4dENvbnRlbnQ6IF92bS5fcyhuZXdzaXRlbXMudGl0bGUpIH0KICAgICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICBfYygidi1jYXJkLXRleHQiLCB7IHN0YXRpY0NsYXNzOiAib3ZlcmxpbmUiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3MobmV3c2l0ZW1zLmF1dGhvcikpCiAgICAgICAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgfSkKICAgIF0sCiAgICAyCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}